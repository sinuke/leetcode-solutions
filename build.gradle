plugins {
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'io.freefair.lombok' version '8.14.2'
    id 'jacoco'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'io.freefair.lombok'

    jacoco {
        toolVersion = "0.8.13"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    group = 'com.sinuke.leetcode'
    version = '1.0'

    repositories {
        mavenCentral()
    }

    ext {
        version_testcontainers = '1.21.3'
        version_junit = '5.13.4'
        version_jackson = '2.20.0'
    }

    dependencies {
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: version_jackson
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'

        testImplementation platform("org.junit:junit-bom:${version_junit}")
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: version_junit
        testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: version_testcontainers
        testImplementation group: 'org.testcontainers', name: 'mysql', version: version_testcontainers
        testImplementation group: 'com.mysql', name: 'mysql-connector-j', version: '9.4.0'

        testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.13.4'
    }

    test {
        useJUnitPlatform()
        testlogger {
            theme = 'mocha'
        }
    }

    tasks.withType(Test).tap { configureEach
            {
                finalizedBy jacocoTestReport
            }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }

}

tasks.register('jacocoRootReport', JacocoReport) {
    dependsOn subprojects.test

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    classDirectories = classDirectories.filter { file ->
        !file.path.contains('common') // exclude "common" module from report
    }

    reports {
        xml.required = true
        html.required = true
    }
}